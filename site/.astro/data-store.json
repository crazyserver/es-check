[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.4","content-config-digest","262e19c900bdc416","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"never\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":8765,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","docs",["Map",11,12,21,22,29,30,37,38,45,46,53,54,62,63,71,72,79,80,88,89,97,98,106,107,115,116,124,125],"authentication",{"id":11,"data":13,"body":16,"filePath":17,"digest":18,"legacyId":19,"deferredRender":20},{"title":14,"description":15},"Authentication","Quasi sapiente voluptates aut minima non doloribus similique quisquam. In quo expedita ipsum nostrum corrupti incidunt. Et aut eligendi ea perferendis.","## Overview\n\nThe Access Shield offers robust authentication mechanisms to ensure secure user access to your application's resources. It includes features such as user registration, login, session management, OAuth integration, two-factor authentication (2FA), and role-based access control (RBAC).\n- **User Registration**: Allow users to create new accounts with a chosen username and password.\n- **Login**: Enable users to authenticate themselves with their credentials.\n- **Session Management**: Manage user sessions to maintain authentication state across requests.\n- **OAuth Integration**: Integrate with OAuth providers for seamless authentication via third-party services.\n- **Two-Factor Authentication (2FA)**: Strengthen account security with an additional layer of authentication.\n- **Role-Based Access Control (RBAC)**: Control user access to resources based on their roles and permissions.\n\n## Getting Started\n\nTo begin using the authentication features of the Access Shield, you need to initialize the authentication module and configure it according to your application's requirements.\n\n\u003Cdiv class=\"max-w-sm md:max-w-2xl\" >\n\n```jsx\nimport { Auth } from 'access-shield';\n\n// Initialize the authentication instance\nconst auth = new Auth();\n\n// Register a new user\nauth.register('username', 'password');\n\n// Log in an existing user\nauth.login('username', 'password');\n\n// Check if user is authenticated\nif (auth.isAuthenticated()) {\n  // User is authenticated, proceed with accessing secure resources\n} else {\n  // User is not authenticated, redirect to login page\n}\n```\n\u003C/div>","src/content/docs/authentication.mdx","bfb7c68d956d19bc","authentication.mdx",true,"contributing-guideline",{"id":21,"data":23,"body":25,"filePath":26,"digest":27,"legacyId":28,"deferredRender":20},{"title":24,"description":15},"Contributing Guidelines","## Guidelines for contibutors\n\n1. **Fork** the repository and **clone** it to your local machine.\n\n2. **Create a branch** for your contribution. Use a descriptive name for your branch.\n\n3. **Commit** your changes with clear and concise messages.\n\n4. **Push** your changes to your fork.\n\n5. **Submit a pull request** (PR) to the `main` branch of the original repository.\n\n6. Ensure your PR includes:\n   - A descriptive title summarizing the changes.\n   - Detailed information in the description about the problem and solution.\n\n7. **Be responsive** to feedback and comments on your PR. Make any requested changes promptly.\n\n8. Before submitting your PR, ensure:\n   - Your code follows the project's style guidelines.\n   - You have included relevant tests (if applicable).\n   - You have updated documentation (if necessary).\n\n9. By contributing, you agree that your work will be licensed under the project's license.\n\nThank you for your contribution!\n\nIf you have any questions or need further assistance, feel free to reach out to us. We're here to help!","src/content/docs/contributing-guideline.mdx","2bc7dad195d0fa53","contributing-guideline.mdx","errorhandling",{"id":29,"data":31,"body":33,"filePath":34,"digest":35,"legacyId":36,"deferredRender":20},{"title":32,"description":15},"Error Handling","## Overview\n\nError handling is an essential aspect of any software development process. Properly handling errors ensures that your application gracefully handles unexpected situations and provides meaningful feedback to users.\n\n## Types of Errors\n\nOur Authentication Library may encounter various types of errors during operation. These errors can include:\n\n- Invalid credentials\n- Network errors\n- Server errors\n- Authentication failures\n- Authorization errors\n\n## Error Codes\n\nEach type of error may have specific error codes associated with it. These error codes can be helpful for identifying and debugging issues in your application.\n\nHere are some example error codes:\n\n- `INVALID_CREDENTIALS`: Indicates that the provided credentials are invalid.\n- `NETWORK_ERROR`: Indicates a network-related error occurred.\n- `SERVER_ERROR`: Indicates an error occurred on the server-side.\n- `AUTHENTICATION_FAILED`: Indicates that authentication failed for the user.\n- `AUTHORIZATION_ERROR`: Indicates that the user is not authorized to access the requested resource.\n\n## Handling Errors\n\nWhen using our Authentication Library, it's important to implement robust error handling mechanisms in your code. Here's a basic example of how to handle errors:\n\n\u003Cdiv class=\"max-w-sm md:max-w-2xl\" >\n```jsx\ntry {\n  // Attempt to perform authentication\n  await auth.login(username, password);\n  // If successful, proceed with accessing secure resources\n} catch (error) {\n  // Handle the error\n  if (error.code === 'INVALID_CREDENTIALS') {\n    // Display error message for invalid credentials\n  } else if (error.code === 'NETWORK_ERROR') {\n    // Display error message for network-related errors\n  } else {\n    // Display a generic error message\n  }\n}\n```\n\u003C/div>","src/content/docs/errorhandling.mdx","9863f9d09a7601ee","errorhandling.mdx","how-to-contribute",{"id":37,"data":39,"body":41,"filePath":42,"digest":43,"legacyId":44,"deferredRender":20},{"title":40,"description":15},"How to contribute","## Getting Started\n\n1. Fork the repository on GitHub.\n2. Clone your forked repository to your local machine:\n\u003Cdiv class=\"max-w-sm md:max-w-2xl\" >\n   ```bash\n   git clone https://github.com/your-username/repository.git\n   ```\n   \u003C/div>\n   \n3. Set up the upstream remote:   \n\u003Cdiv class=\"max-w-sm md:max-w-2xl\" >\n   ```bash\n   git remote add upstream https://github.com/original-repository/repository.git\n   ```\n   \u003C/div>\n4. Create a new branch for your contribution:  \n\u003Cdiv class=\"max-w-sm md:max-w-2xl\" >\n   ```bash\n   git checkout -b feature/new-feature\n   ```\n   \u003C/div>","src/content/docs/how-to-contribute.mdx","a0dab714aaea6f1d","how-to-contribute.mdx","having-an-issue",{"id":45,"data":47,"body":49,"filePath":50,"digest":51,"legacyId":52,"deferredRender":20},{"title":48,"description":15},"Report an Issue","## How to Report an Issue\n\nIf you encounter a problem or have a suggestion for improvement, we encourage you to report it. Here's how you can do that:\n\n1. **Navigate to the \"Issues\" tab**: Go to the GitHub repository of our project.\n\n2. **Check existing issues**: Before creating a new issue, search through the existing ones to see if your problem has already been reported. If you find a similar issue, you can add a comment to provide additional details or subscribe to receive updates.\n\n3. **Create a new issue**: If you couldn't find an existing issue that matches yours, click on the \"New issue\" button.\n\n4. **Provide a clear title and description**: Give your issue a descriptive title that summarizes the problem or suggestion. In the description, include detailed steps to reproduce the issue (if applicable) and any relevant information about your environment.\n\n5. **Attach screenshots or code snippets**: If applicable, include screenshots or code snippets to help illustrate the issue you're experiencing.\n\n6. **Submit the issue**: Once you've filled out all the necessary information, click on the \"Submit new issue\" button.\n\nThat's it! Your issue will be reviewed by our team, and we'll do our best to address it as soon as possible.","src/content/docs/having-an-issue.mdx","94b32168c98a2d68","having-an-issue.mdx","sdks",{"id":53,"data":55,"body":58,"filePath":59,"digest":60,"legacyId":61,"deferredRender":20},{"title":56,"description":57},"SDKs","Discover the supported SDKs by Access Shield for seamless integration into your projects.","## Supported SDKs\n\nAccess Shield supports a variety of SDKs to facilitate integration into your projects:\n\n### 1. JavaScript SDK\n\nThe JavaScript SDK offers a seamless integration experience for JavaScript-based projects. It provides a wrapper for interacting with Access Shield's authentication features.\n\n### 2. TypeScript SDK\n\nThe TypeScript SDK extends support to TypeScript projects, offering typings and enhanced type safety while leveraging Access Shield's functionality.\n\n### 3. Python SDK (Coming Soon)\n\nStay tuned for the upcoming Python SDK, designed to empower Python developers with the capabilities of Access Shield for secure authentication in their applications.\n\n### 4. Java SDK (Planned)\n\nOur roadmap includes the development of a Java SDK, catering to the Java ecosystem and enabling robust authentication solutions for Java applications.\n\n## Usage\n\nIntegrating Access Shield into your projects is straightforward with our SDKs. Simply refer to the respective documentation for each SDK to find comprehensive usage instructions and examples tailored to your development environment.\n\n## API Reference\n\nEach SDK comes with its own API reference, providing detailed documentation on the methods and functionalities available for seamless authentication integration. Refer to the API reference in the SDK documentation for in-depth information.\n\n## Support\n\nShould you encounter any issues or have questions during integration, our dedicated support team is here to assist you. Feel free to reach out to us at [support@example.com](mailto:support@example.com) for prompt assistance and guidance.","src/content/docs/sdks.mdx","fd2b62f551133115","sdks.mdx","gettingstarted",{"id":62,"data":64,"body":67,"filePath":68,"digest":69,"legacyId":70,"deferredRender":20},{"title":65,"description":66},"Getting Started","Get started with ES Check - Check JavaScript files ES version against a specified ES version","# Getting Started with ES Check\n\n**ES Check** checks JavaScript files against a specified version of ECMAScript (ES) with a shell command. If a specified file's ES version doesn't match the ES version argument passed in the ES Check command, ES Check will throw an error and log the files that didn't match the check.\n\n## Why ES Check?\n\nIn modern JavaScript builds, files are bundled up so they can be served in an optimized manner in the browsers. It is assumed by developers that future JavaScript—like ES8 will be transpiled (changed from future JavaScript to current JavaScript) appropriately by a tool like Babel. Sometimes there is an issue where files are not transpiled. There was no efficient way to test for files that weren't transpiled—until now. That's what ES Check does.\n\n## Installation\n\nInstall ES Check locally or globally:\n\n```bash\nnpm i es-check --save-dev   # locally\nnpm i es-check -g           # or globally\n```\n\n## Quick Start\n\nCheck if an array or glob of files matches a specified ES version:\n\n```bash\nes-check es5 './vendor/js/*.js' './dist/**/*.js'\n```\n\nThe ES Check script above checks `/dist/*.js` files to see if they're ES5. It throws an error and logs files that do not pass the check.\n\n## Basic Usage\n\nES Check is a shell command CLI that takes in two arguments: an ECMAScript version and files in globs.\n\n```bash\n# Check single directory\nes-check es6 ./js/*.js\n\n# Check multiple directories\nes-check es6 ./js/*.js ./dist/*.js\n```\n\n## ES Versions Supported\n\nES Check supports the following ECMAScript versions:\n- es3\n- es4\n- es5\n- es6/es2015\n- es7/es2016\n- es8/es2017\n- es9/es2018\n- es10/es2019\n- es11/es2020\n- es12/es2021\n- es13/es2022\n- es14/es2023\n\n## Configuration File\n\nFor consistent configuration, create a `.escheckrc` file in JSON format:\n\n```json\n{\n  \"ecmaVersion\": \"es6\",\n  \"module\": false,\n  \"files\": \"./dist/**/*.js\",\n  \"not\": [\"./dist/skip/*.js\"],\n  \"checkFeatures\": true\n}\n```\n\nThen run ES Check without arguments:\n\n```bash\nes-check\n```\n\n## Next Steps\n\n- [Explore command options](/documentation/options)\n- [Check ES version specific features](/documentation/features)\n- [Set up browserslist integration](/documentation/browserslist)\n- [Debug errors effectively](/documentation/debugging)","src/content/docs/gettingstarted.mdx","875d6c4c1b8bd31d","gettingstarted.mdx","hooks",{"id":71,"data":73,"body":75,"filePath":76,"digest":77,"legacyId":78,"deferredRender":20},{"title":74,"description":15},"Hooks Guide","## Overview\n\nHooks are a powerful feature in Access Shield that allow you to integrate authentication functionality into your React application with ease. By using hooks, you can access authentication state and perform authentication-related actions within your components.\n\n## Available Hooks\n\nOur Authentication Library provides the following hooks:\n\n### `useAuthentication`\n\nThe `useAuthentication` hook allows you to access the authentication state and perform authentication-related actions, such as login, logout, and checking authentication status.\n\n### `useUser`\n\nThe `useUser` hook allows you to access the user object, including user information and authentication status.\n\n### `useError`\n\nThe `useError` hook allows you to access and handle authentication errors.\n\n## Usage\n\nHere's an example of how to use the `useAuthentication` hook:\n\n\u003Cdiv class=\"max-w-sm md:max-w-2xl\" >\n\n```jsx\nimport { useAuthentication } from 'access-shield';\n\nfunction LoginButton() {\n  const { login } = useAuthentication();\n\n  const handleLogin = () => {\n    login('username', 'password');\n  };\n\n  return (\n    \u003Cbutton onClick={handleLogin}>Login\u003C/button>\n  );\n}\n```\n\u003C/div>","src/content/docs/hooks.mdx","9de5c67e8d6abcd4","hooks.mdx","quickstart",{"id":79,"data":81,"body":84,"filePath":85,"digest":86,"legacyId":87,"deferredRender":20},{"title":82,"description":83},"Quick Start","Get up and running with ES Check in minutes","# Quick Start\n\nThis guide will help you get started with ES Check in just a few minutes.\n\n## Installation\n\nFirst, install ES Check in your project:\n\n```bash\nnpm install es-check --save-dev\n```\n\n## Basic Usage\n\n### Example 1: Check ES5 Compatibility\n\nCheck if your bundled JavaScript is ES5 compatible:\n\n```bash\nnpx es-check es5 './dist/**/*.js'\n```\n\n### Example 2: Check Multiple Directories\n\nCheck both vendor and distribution files:\n\n```bash\nnpx es-check es5 './vendor/**/*.js' './dist/**/*.js'\n```\n\n### Example 3: Check ES6 Modules\n\nFor ES6 modules, use the `--module` flag:\n\n```bash\nnpx es-check es6 './src/**/*.mjs' --module\n```\n\n## Common Scenarios\n\n### Production Build Check\n\nAdd to your build pipeline:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"webpack && npm run check:es\",\n    \"check:es\": \"es-check es5 './dist/**/*.js'\"\n  }\n}\n```\n\n### CI/CD Integration\n\n```yaml\n# Example GitHub Actions\n- name: Check ES Version\n  run: npx es-check es5 './dist/**/*.js'\n```\n\n### With Configuration File\n\nCreate `.escheckrc`:\n\n```json\n{\n  \"ecmaVersion\": \"es5\",\n  \"files\": [\"./dist/**/*.js\"],\n  \"not\": [\"./dist/modern/**/*.js\"]\n}\n```\n\nRun with:\n\n```bash\nnpx es-check\n```\n\n## Understanding Output\n\n### Success\n\n```bash\n✓ ES Check passed! All files are ES5 compatible.\n```\n\n### Failure\n\n```bash\n✗ ES Check failed!\n./dist/app.js - Uses ES6 feature: arrow function (line 10)\n./dist/utils.js - Uses ES6 feature: const declaration (line 5)\n```\n\n## What's Next?\n\n- [Explore all command options](/documentation/options)\n- [Configure ES Check for your project](/documentation/configuration)\n- [Debug ES version issues](/documentation/debugging)","src/content/docs/quickstart.mdx","469428e3e6c49348","quickstart.mdx","installation",{"id":88,"data":90,"body":93,"filePath":94,"digest":95,"legacyId":96,"deferredRender":20},{"title":91,"description":92},"Installation","How to install ES Check in your project","# Installation\n\nES Check can be installed globally for system-wide usage or locally within your project.\n\n## Prerequisites\n\n- Node.js (version 14 or higher)\n- npm or yarn package manager\n\n## Installation Methods\n\n### Local Installation (Recommended)\n\nInstalling ES Check locally ensures that everyone working on your project uses the same version:\n\n```bash\nnpm install es-check --save-dev\n```\n\nOr with yarn:\n\n```bash\nyarn add es-check --dev\n```\n\n### Global Installation\n\nFor system-wide availability:\n\n```bash\nnpm install -g es-check\n```\n\nOr with yarn:\n\n```bash\nyarn global add es-check\n```\n\n## Verify Installation\n\nTo verify ES Check is installed correctly:\n\n```bash\n# For local installation\nnpx es-check --version\n\n# For global installation\nes-check --version\n```\n\n## Setting Up in package.json\n\nAdd ES Check to your npm scripts for easy usage:\n\n```json\n{\n  \"scripts\": {\n    \"check:es5\": \"es-check es5 './dist/**/*.js'\",\n    \"check:es6\": \"es-check es6 './dist/**/*.js'\",\n    \"check:es-modules\": \"es-check es6 './dist/**/*.js' --module\"\n  }\n}\n```\n\n## Next Steps\n\n- [Quick Start Guide](/documentation/quickstart)\n- [Configuration Options](/documentation/options)\n- [Using with CI/CD](/documentation/ci-integration)","src/content/docs/installation.mdx","f22517737bf2832b","installation.mdx","options",{"id":97,"data":99,"body":102,"filePath":103,"digest":104,"legacyId":105,"deferredRender":20},{"title":100,"description":101},"Command Options","All available ES Check command-line options and flags","# Command Options\n\nES Check provides numerous command-line options to customize its behavior. Here's a comprehensive guide to all available options.\n\n## Basic Usage\n\n```bash\nes-check \u003CecmaVersion> [files...] [options]\n```\n\n## Options Reference\n\n### `--module`\nUse ES modules parsing mode (default: false)\n\n```bash\nes-check es6 './dist/**/*.js' --module\n```\n\n### `--allowHashBang`\nAllow files starting with `#!` (shebang) (default: false)\n\n```bash\nes-check es6 './bin/*.js' --allowHashBang\n```\n\n### `--files \u003Cfiles>`\nSpecify files to check (alternative to positional arguments)\n\n```bash\nes-check es6 --files='./dist/**/*.js'\n```\n\n### `--not \u003Cfiles>`\nExclude specific files or patterns\n\n```bash\nes-check es5 './dist/**/*.js' --not='./dist/vendor/**/*.js'\n```\n\n### `--checkFeatures`\nCheck for ES version specific features (default: false)\n\n```bash\nes-check es6 './dist/**/*.js' --checkFeatures\n```\n\n### `--checkForPolyfills`\nConsider polyfills when checking features (requires --checkFeatures)\n\n```bash\nes-check es2022 './dist/**/*.js' --checkFeatures --checkForPolyfills\n```\n\n### `--ignore \u003Cfeatures>`\nComma-separated list of features to ignore\n\n```bash\nes-check es6 './dist/**/*.js' --checkFeatures --ignore=\"ErrorCause,TopLevelAwait\"\n```\n\n### `--allowList \u003Cfeatures>`\nAllow specific features even in lower ES versions\n\n```bash\nes-check es5 './dist/**/*.js' --checkFeatures --allowList=\"const,let\"\n```\n\n### `--checkBrowser`\nUse browserslist configuration to determine ES version\n\n```bash\nes-check --checkBrowser --browserslistQuery=\"last 2 versions\" ./dist/**/*.js\n```\n\n### `--browserslistQuery \u003Cquery>`\nCustom browserslist query\n\n```bash\nes-check checkBrowser ./dist/**/*.js --browserslistQuery=\">0.5%, not dead\"\n```\n\n### `--config \u003Cpath>`\nPath to custom .escheckrc config file\n\n```bash\nes-check --config=./configs/production.escheckrc.json\n```\n\n### Display Options\n\n- `--noColor` - Disable colored output\n- `--verbose` or `-v` - Show debug messages\n- `--quiet` - Only show warnings and errors\n- `--silent` - No output except exit code\n\n### Other Options\n\n- `--looseGlobMatching` - Don't fail if some globs match no files\n- `--version` or `-V` - Show version number\n- `--help` or `-h` - Show help message","src/content/docs/options.mdx","f48dc6dd5c1f9ebf","options.mdx","configuration",{"id":106,"data":108,"body":111,"filePath":112,"digest":113,"legacyId":114,"deferredRender":20},{"title":109,"description":110},"Configuration","How to configure ES Check using .escheckrc files","# Configuration\n\nES Check can be configured using a `.escheckrc` file in your project root. This allows you to define consistent settings that can be version controlled and shared across your team.\n\n## Configuration File\n\nCreate a `.escheckrc` file in your project root:\n\n```json\n{\n  \"ecmaVersion\": \"es6\",\n  \"module\": false,\n  \"files\": \"./dist/**/*.js\",\n  \"not\": [\"./dist/skip/*.js\"],\n  \"allowHashBang\": false,\n  \"checkFeatures\": true\n}\n```\n\n## Configuration Options\n\nAll command-line options can be specified in the configuration file:\n\n| Option | Type | Description |\n|--------|------|-------------|\n| `ecmaVersion` | String | ECMAScript version (e.g., \"es5\", \"es6\", \"es2020\") |\n| `files` | String/Array | Files or patterns to check |\n| `module` | Boolean | Parse files as ES modules |\n| `not` | Array | Files or patterns to exclude |\n| `allowHashBang` | Boolean | Allow hash bang in files |\n| `checkFeatures` | Boolean | Check for ES version specific features |\n| `checkForPolyfills` | Boolean | Consider polyfills when checking |\n| `ignore` | Array | Features to ignore |\n| `allowList` | Array | Features to allow |\n| `checkBrowser` | Boolean | Use browserslist configuration |\n| `browserslistQuery` | String | Custom browserslist query |\n\n## Multiple Configurations\n\nFor projects with different build targets, use an array configuration:\n\n```json\n[\n  {\n    \"ecmaVersion\": \"es5\",\n    \"files\": \"dist/legacy/**/*.js\"\n  },\n  {\n    \"ecmaVersion\": \"es2020\",\n    \"module\": true,\n    \"files\": \"dist/modern/**/*.js\"\n  }\n]\n```\n\n## Custom Config Path\n\nUse a custom configuration file location:\n\n```bash\nes-check --config=./config/es-check-production.json\n```\n\n## Priority\n\nCommand-line arguments override configuration file settings:\n\n```bash\n# Uses es6 instead of config file's ecmaVersion\nes-check es6 --config=.escheckrc\n```","src/content/docs/configuration.mdx","5502793f9678c2e6","configuration.mdx","features",{"id":115,"data":117,"body":120,"filePath":121,"digest":122,"legacyId":123,"deferredRender":20},{"title":118,"description":119},"ES Features Detection","How ES Check detects ECMAScript version-specific features","# ES Features Detection\n\nES Check can detect specific ECMAScript features in your code using the `--checkFeatures` flag. This ensures your code only uses features available in your target ES version.\n\n## Enabling Feature Detection\n\n```bash\nes-check es5 './dist/**/*.js' --checkFeatures\n```\n\n## Detected Features by Version\n\n### ES6 (ES2015) Features\n- Arrow functions\n- Classes\n- Template literals\n- Destructuring\n- Default parameters\n- Rest/Spread operators\n- `let` and `const`\n- `for...of` loops\n- Generators\n- Promises\n- Symbols\n- Maps and Sets\n\n### ES7 (ES2016) Features\n- Exponentiation operator (`**`)\n- `Array.prototype.includes()`\n\n### ES8 (ES2017) Features\n- Async/await\n- `Object.values()` and `Object.entries()`\n- String padding methods\n- Trailing commas in function parameters\n\n### ES9 (ES2018) Features\n- Rest/Spread properties\n- Asynchronous iteration\n- `Promise.finally()`\n- RegExp improvements\n\n### ES10 (ES2019) Features\n- `Array.prototype.flat()` and `flatMap()`\n- `Object.fromEntries()`\n- Optional catch binding\n- `String.prototype.trimStart()` and `trimEnd()`\n\n### ES11 (ES2020) Features\n- Optional chaining (`?.`)\n- Nullish coalescing (`??`)\n- `BigInt`\n- `Promise.allSettled()`\n- Dynamic import\n\n### ES12 (ES2021) Features\n- Logical assignment operators (`&&=`, `||=`, `??=`)\n- Numeric separators\n- `String.prototype.replaceAll()`\n- `Promise.any()`\n\n### ES13 (ES2022) Features\n- Top-level await\n- Private class fields and methods\n- Static class fields\n- Error cause\n- `Array.prototype.at()`\n\n## Ignoring Specific Features\n\nIf you need to temporarily ignore certain features:\n\n```bash\nes-check es6 './dist/**/*.js' --checkFeatures --ignore=\"ErrorCause,TopLevelAwait\"\n```\n\n## Allowing Specific Features\n\nAllow certain modern features even in older ES versions:\n\n```bash\nes-check es5 './dist/**/*.js' --checkFeatures --allowList=\"const,let\"\n```\n\n## Polyfill Detection\n\nES Check can detect polyfilled features to avoid false positives:\n\n```bash\nes-check es2022 './dist/**/*.js' --checkFeatures --checkForPolyfills\n```","src/content/docs/features.mdx","6694ab7171b033fa","features.mdx","browserslist",{"id":124,"data":126,"body":129,"filePath":130,"digest":131,"legacyId":132,"deferredRender":20},{"title":127,"description":128},"Browserslist Integration","Use browserslist to automatically determine ES version requirements","# Browserslist Integration\n\nES Check integrates with [Browserslist](https://github.com/browserslist/browserslist) to automatically determine the appropriate ECMAScript version based on your target browsers.\n\n## Basic Usage\n\n```bash\nes-check --checkBrowser --browserslistQuery=\"last 2 versions\" ./dist/**/*.js\n```\n\nOr use `checkBrowser` as the ES version:\n\n```bash\nes-check checkBrowser ./dist/**/*.js --browserslistQuery=\">0.5%, not dead\"\n```\n\n## Using Project Browserslist\n\nIf you have a `.browserslistrc` file or `browserslist` in `package.json`:\n\n```bash\nes-check checkBrowser ./dist/**/*.js\n```\n\n### .browserslistrc Example\n\n```\n# Browsers we support\nlast 2 versions\n> 1%\nnot dead\n```\n\n### package.json Example\n\n```json\n{\n  \"browserslist\": [\n    \"last 2 versions\",\n    \"> 1%\",\n    \"not dead\"\n  ]\n}\n```\n\n## Browserslist Environments\n\nUse different configurations for different environments:\n\n```bash\nes-check --checkBrowser --browserslistEnv=\"production\" ./dist/**/*.js\n```\n\nWith environment-specific config:\n\n```\n[production]\n> 0.5%\nlast 2 versions\nFirefox ESR\nnot dead\n\n[development]\nlast 1 chrome version\nlast 1 firefox version\n```\n\n## Common Queries\n\n### Modern Browsers\n```bash\n--browserslistQuery=\"last 2 chrome versions, last 2 firefox versions, last 2 safari versions\"\n```\n\n### Legacy Support\n```bash\n--browserslistQuery=\"> 0.25%, not dead, IE 11\"\n```\n\n### Mobile First\n```bash\n--browserslistQuery=\"last 2 iOS versions, last 2 Android versions\"\n```\n\n## Configuration File\n\nIn `.escheckrc`:\n\n```json\n{\n  \"checkBrowser\": true,\n  \"browserslistQuery\": \"> 1%, last 2 versions\",\n  \"browserslistEnv\": \"production\",\n  \"files\": \"./dist/**/*.js\"\n}\n```\n\n## How It Works\n\n1. ES Check reads your browserslist configuration\n2. Determines the minimum ES version needed for those browsers\n3. Checks your code against that ES version\n4. Reports any incompatibilities\n\nThis ensures your code works in all your target browsers without manually tracking ES version support.","src/content/docs/browserslist.mdx","b4d73205b4a1aadb","browserslist.mdx"]