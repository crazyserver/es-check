[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.4","content-config-digest","262e19c900bdc416","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"never\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","docs",["Map",11,12,21,22,30,31,39,40,48,49,57,58,66,67,75,76,84,85,93,94,102,103,111,112,120,121],"browserslist",{"id":11,"data":13,"body":16,"filePath":17,"digest":18,"legacyId":19,"deferredRender":20},{"title":14,"description":15},"Browserslist Integration","Use browserslist to automatically determine ES version requirements","# Browserslist Integration\n\nES Check integrates with [Browserslist](https://github.com/browserslist/browserslist) to automatically determine the appropriate ECMAScript version based on your target browsers.\n\n## Basic Usage\n\n```bash\nes-check --checkBrowser --browserslistQuery=\"last 2 versions\" ./dist/**/*.js\n```\n\nOr use `checkBrowser` as the ES version:\n\n```bash\nes-check checkBrowser ./dist/**/*.js --browserslistQuery=\">0.5%, not dead\"\n```\n\n## Using Project Browserslist\n\nIf you have a `.browserslistrc` file or `browserslist` in `package.json`:\n\n```bash\nes-check checkBrowser ./dist/**/*.js\n```\n\n### .browserslistrc Example\n\n```\n# Browsers we support\nlast 2 versions\n> 1%\nnot dead\n```\n\n### package.json Example\n\n```json\n{\n  \"browserslist\": [\n    \"last 2 versions\",\n    \"> 1%\",\n    \"not dead\"\n  ]\n}\n```\n\n## Browserslist Environments\n\nUse different configurations for different environments:\n\n```bash\nes-check --checkBrowser --browserslistEnv=\"production\" ./dist/**/*.js\n```\n\nWith environment-specific config:\n\n```\n[production]\n> 0.5%\nlast 2 versions\nFirefox ESR\nnot dead\n\n[development]\nlast 1 chrome version\nlast 1 firefox version\n```\n\n## Common Queries\n\n### Modern Browsers\n```bash\n--browserslistQuery=\"last 2 chrome versions, last 2 firefox versions, last 2 safari versions\"\n```\n\n### Legacy Support\n```bash\n--browserslistQuery=\"> 0.25%, not dead, IE 11\"\n```\n\n### Mobile First\n```bash\n--browserslistQuery=\"last 2 iOS versions, last 2 Android versions\"\n```\n\n## Configuration File\n\nIn `.escheckrc`:\n\n```json\n{\n  \"checkBrowser\": true,\n  \"browserslistQuery\": \"> 1%, last 2 versions\",\n  \"browserslistEnv\": \"production\",\n  \"files\": \"./dist/**/*.js\"\n}\n```\n\n## How It Works\n\n1. ES Check reads your browserslist configuration\n2. Determines the minimum ES version needed for those browsers\n3. Checks your code against that ES version\n4. Reports any incompatibilities\n\nThis ensures your code works in all your target browsers without manually tracking ES version support.","src/content/docs/browserslist.mdx","b4d73205b4a1aadb","browserslist.mdx",true,"contributing-guideline",{"id":21,"data":23,"body":26,"filePath":27,"digest":28,"legacyId":29,"deferredRender":20},{"title":24,"description":25},"Contributing Guidelines","Guidelines for contributing to ES Check - code standards, PR process, and testing requirements","## Guidelines for contributors\n\n1. **Fork** the repository and **clone** it to your local machine.\n\n2. **Create a branch** for your contribution. Use a descriptive name for your branch.\n\n3. **Commit** your changes with clear and concise messages.\n\n4. **Push** your changes to your fork.\n\n5. **Submit a pull request** (PR) to the `main` branch of the original repository.\n\n6. Ensure your PR includes:\n   - A descriptive title summarizing the changes.\n   - Detailed information in the description about the problem and solution.\n\n7. **Be responsive** to feedback and comments on your PR. Make any requested changes promptly.\n\n8. Before submitting your PR, ensure:\n   - Your code follows the project's style guidelines.\n   - You have included relevant tests (if applicable).\n   - You have updated documentation (if necessary).\n\n9. By contributing, you agree that your work will be licensed under ES Check's MIT license.\n\nThank you for your contribution!\n\nIf you have any questions or need further assistance, feel free to reach out to us. We're here to help!","src/content/docs/contributing-guideline.mdx","ec655cbb8aa63eb9","contributing-guideline.mdx","configuration",{"id":30,"data":32,"body":35,"filePath":36,"digest":37,"legacyId":38,"deferredRender":20},{"title":33,"description":34},"Configuration","How to configure ES Check using .escheckrc files","# Configuration\n\nES Check can be configured using a `.escheckrc` file in your project root. This allows you to define consistent settings that can be version controlled and shared across your team.\n\n## Configuration File\n\nCreate a `.escheckrc` file in your project root:\n\n```json\n{\n  \"ecmaVersion\": \"es6\",\n  \"module\": false,\n  \"files\": \"./dist/**/*.js\",\n  \"not\": [\"./dist/skip/*.js\"],\n  \"allowHashBang\": false,\n  \"checkFeatures\": true\n}\n```\n\n## Configuration Options\n\nAll command-line options can be specified in the configuration file:\n\n| Option | Type | Description |\n|--------|------|-------------|\n| `ecmaVersion` | String | ECMAScript version (e.g., \"es5\", \"es6\", \"es2020\") |\n| `files` | String/Array | Files or patterns to check |\n| `module` | Boolean | Parse files as ES modules |\n| `not` | Array | Files or patterns to exclude |\n| `allowHashBang` | Boolean | Allow hash bang in files |\n| `checkFeatures` | Boolean | Check for ES version specific features |\n| `checkForPolyfills` | Boolean | Consider polyfills when checking |\n| `ignore` | Array | Features to ignore |\n| `allowList` | Array | Features to allow |\n| `checkBrowser` | Boolean | Use browserslist configuration |\n| `browserslistQuery` | String | Custom browserslist query |\n\n## Multiple Configurations\n\nFor projects with different build targets, use an array configuration:\n\n```json\n[\n  {\n    \"ecmaVersion\": \"es5\",\n    \"files\": \"dist/legacy/**/*.js\"\n  },\n  {\n    \"ecmaVersion\": \"es2020\",\n    \"module\": true,\n    \"files\": \"dist/modern/**/*.js\"\n  }\n]\n```\n\n## Custom Config Path\n\nUse a custom configuration file location:\n\n```bash\nes-check --config=./config/es-check-production.json\n```\n\n## Priority\n\nCommand-line arguments override configuration file settings:\n\n```bash\n# Uses es6 instead of config file's ecmaVersion\nes-check es6 --config=.escheckrc\n```","src/content/docs/configuration.mdx","5502793f9678c2e6","configuration.mdx","gettingstarted",{"id":39,"data":41,"body":44,"filePath":45,"digest":46,"legacyId":47,"deferredRender":20},{"title":42,"description":43},"Getting Started","Get started with ES Check - Check JavaScript files ES version against a specified ES version","# Getting Started with ES Check\n\n**ES Check** checks JavaScript files against a specified version of ECMAScript (ES) with a shell command. If a specified file's ES version doesn't match the ES version argument passed in the ES Check command, ES Check will throw an error and log the files that didn't match the check.\n\n## Why ES Check?\n\nIn modern JavaScript builds, files are bundled up so they can be served in an optimized manner in the browsers. It is assumed by developers that future JavaScript—like ES8 will be transpiled (changed from future JavaScript to current JavaScript) appropriately by a tool like Babel. Sometimes there is an issue where files are not transpiled. There was no efficient way to test for files that weren't transpiled—until now. That's what ES Check does.\n\n## Installation\n\nInstall ES Check locally or globally:\n\n```bash\nnpm i es-check --save-dev   # locally\nnpm i es-check -g           # or globally\n```\n\n## Quick Start\n\nCheck if an array or glob of files matches a specified ES version:\n\n```bash\nes-check es5 './vendor/js/*.js' './dist/**/*.js'\n```\n\nThe ES Check script above checks `/dist/*.js` files to see if they're ES5. It throws an error and logs files that do not pass the check.\n\n## Basic Usage\n\nES Check is a shell command CLI that takes in two arguments: an ECMAScript version and files in globs.\n\n```bash\n# Check single directory\nes-check es6 ./js/*.js\n\n# Check multiple directories\nes-check es6 ./js/*.js ./dist/*.js\n```\n\n## ES Versions Supported\n\nES Check supports the following ECMAScript versions:\n- es3\n- es4\n- es5\n- es6/es2015\n- es7/es2016\n- es8/es2017\n- es9/es2018\n- es10/es2019\n- es11/es2020\n- es12/es2021\n- es13/es2022\n- es14/es2023\n\n## Configuration File\n\nFor consistent configuration, create a `.escheckrc` file in JSON format:\n\n```json\n{\n  \"ecmaVersion\": \"es6\",\n  \"module\": false,\n  \"files\": \"./dist/**/*.js\",\n  \"not\": [\"./dist/skip/*.js\"],\n  \"checkFeatures\": true\n}\n```\n\nThen run ES Check without arguments:\n\n```bash\nes-check\n```\n\n## Next Steps\n\n- [Explore command options](/documentation/options)\n- [Check ES version specific features](/documentation/features)\n- [Set up browserslist integration](/documentation/browserslist)\n- [Debug errors effectively](/documentation/debugging)","src/content/docs/gettingstarted.mdx","875d6c4c1b8bd31d","gettingstarted.mdx","having-an-issue",{"id":48,"data":50,"body":53,"filePath":54,"digest":55,"legacyId":56,"deferredRender":20},{"title":51,"description":52},"Report an Issue","How to report bugs, request features, or get help with ES Check","## How to Report an Issue\n\nIf you encounter a problem or have a suggestion for improvement, we encourage you to report it. Here's how you can do that:\n\n1. **Navigate to the \"Issues\" tab**: Go to the [ES Check GitHub repository](https://github.com/yowainwright/es-check/issues).\n\n2. **Check existing issues**: Before creating a new issue, search through the existing ones to see if your problem has already been reported. If you find a similar issue, you can add a comment to provide additional details or subscribe to receive updates.\n\n3. **Create a new issue**: If you couldn't find an existing issue that matches yours, click on the \"New issue\" button.\n\n4. **Provide a clear title and description**: Give your issue a descriptive title that summarizes the problem or suggestion. In the description, include detailed steps to reproduce the issue (if applicable) and any relevant information about your environment.\n\n5. **Attach screenshots or code snippets**: If applicable, include screenshots or code snippets to help illustrate the issue you're experiencing.\n\n6. **Submit the issue**: Once you've filled out all the necessary information, click on the \"Submit new issue\" button.\n\nThat's it! Your issue will be reviewed by our team, and we'll do our best to address it as soon as possible.","src/content/docs/having-an-issue.mdx","702b55be3e707a98","having-an-issue.mdx","installation",{"id":57,"data":59,"body":62,"filePath":63,"digest":64,"legacyId":65,"deferredRender":20},{"title":60,"description":61},"Installation","How to install ES Check in your project","# Installation\n\nES Check can be installed globally for system-wide usage or locally within your project.\n\n## Prerequisites\n\n- Node.js (version 14 or higher)\n- npm or yarn package manager\n\n## Installation Methods\n\n### Local Installation (Recommended)\n\nInstalling ES Check locally ensures that everyone working on your project uses the same version:\n\n```bash\nnpm install es-check --save-dev\n```\n\nOr with yarn:\n\n```bash\nyarn add es-check --dev\n```\n\n### Global Installation\n\nFor system-wide availability:\n\n```bash\nnpm install -g es-check\n```\n\nOr with yarn:\n\n```bash\nyarn global add es-check\n```\n\n## Verify Installation\n\nTo verify ES Check is installed correctly:\n\n```bash\n# For local installation\nnpx es-check --version\n\n# For global installation\nes-check --version\n```\n\n## Setting Up in package.json\n\nAdd ES Check to your npm scripts for easy usage:\n\n```json\n{\n  \"scripts\": {\n    \"check:es5\": \"es-check es5 './dist/**/*.js'\",\n    \"check:es6\": \"es-check es6 './dist/**/*.js'\",\n    \"check:es-modules\": \"es-check es6 './dist/**/*.js' --module\"\n  }\n}\n```\n\n## Next Steps\n\n- [Quick Start Guide](/documentation/quickstart)\n- [Configuration Options](/documentation/options)\n- [Using with CI/CD](/documentation/ci-integration)","src/content/docs/installation.mdx","f22517737bf2832b","installation.mdx","features",{"id":66,"data":68,"body":71,"filePath":72,"digest":73,"legacyId":74,"deferredRender":20},{"title":69,"description":70},"ES Features Detection","How ES Check detects ECMAScript version-specific features","# ES Features Detection\n\nES Check can detect specific ECMAScript features in your code using the `--checkFeatures` flag. This ensures your code only uses features available in your target ES version.\n\n## Enabling Feature Detection\n\n```bash\nes-check es5 './dist/**/*.js' --checkFeatures\n```\n\n## Detected Features by Version\n\n### ES6 (ES2015) Features\n- Arrow functions\n- Classes\n- Template literals\n- Destructuring\n- Default parameters\n- Rest/Spread operators\n- `let` and `const`\n- `for...of` loops\n- Generators\n- Promises\n- Symbols\n- Maps and Sets\n\n### ES7 (ES2016) Features\n- Exponentiation operator (`**`)\n- `Array.prototype.includes()`\n\n### ES8 (ES2017) Features\n- Async/await\n- `Object.values()` and `Object.entries()`\n- String padding methods\n- Trailing commas in function parameters\n\n### ES9 (ES2018) Features\n- Rest/Spread properties\n- Asynchronous iteration\n- `Promise.finally()`\n- RegExp improvements\n\n### ES10 (ES2019) Features\n- `Array.prototype.flat()` and `flatMap()`\n- `Object.fromEntries()`\n- Optional catch binding\n- `String.prototype.trimStart()` and `trimEnd()`\n\n### ES11 (ES2020) Features\n- Optional chaining (`?.`)\n- Nullish coalescing (`??`)\n- `BigInt`\n- `Promise.allSettled()`\n- Dynamic import\n\n### ES12 (ES2021) Features\n- Logical assignment operators (`&&=`, `||=`, `??=`)\n- Numeric separators\n- `String.prototype.replaceAll()`\n- `Promise.any()`\n\n### ES13 (ES2022) Features\n- Top-level await\n- Private class fields and methods\n- Static class fields\n- Error cause\n- `Array.prototype.at()`\n\n## Ignoring Specific Features\n\nIf you need to temporarily ignore certain features:\n\n```bash\nes-check es6 './dist/**/*.js' --checkFeatures --ignore=\"ErrorCause,TopLevelAwait\"\n```\n\n## Allowing Specific Features\n\nAllow certain modern features even in older ES versions:\n\n```bash\nes-check es5 './dist/**/*.js' --checkFeatures --allowList=\"const,let\"\n```\n\n## Polyfill Detection\n\nES Check can detect polyfilled features to avoid false positives:\n\n```bash\nes-check es2022 './dist/**/*.js' --checkFeatures --checkForPolyfills\n```","src/content/docs/features.mdx","6694ab7171b033fa","features.mdx","how-to-contribute",{"id":75,"data":77,"body":80,"filePath":81,"digest":82,"legacyId":83,"deferredRender":20},{"title":78,"description":79},"How to contribute","Step-by-step guide to contributing to ES Check - setup, development workflow, and submitting pull requests","## Getting Started\n\n1. Fork the repository on GitHub.\n2. Clone your forked repository to your local machine:\n\u003Cdiv class=\"max-w-sm md:max-w-2xl\" >\n   ```bash\n   git clone https://github.com/yowainwright/es-check.git\n   ```\n   \u003C/div>\n   \n3. Set up the upstream remote:   \n\u003Cdiv class=\"max-w-sm md:max-w-2xl\" >\n   ```bash\n   git remote add upstream https://github.com/yowainwright/es-check.git\n   ```\n   \u003C/div>\n4. Create a new branch for your contribution:  \n\u003Cdiv class=\"max-w-sm md:max-w-2xl\" >\n   ```bash\n   git checkout -b feature/new-feature\n   ```\n   \u003C/div>","src/content/docs/how-to-contribute.mdx","102cc5ac470e25ac","how-to-contribute.mdx","options",{"id":84,"data":86,"body":89,"filePath":90,"digest":91,"legacyId":92,"deferredRender":20},{"title":87,"description":88},"Command Options","All available ES Check command-line options and flags","# Command Options\n\nES Check provides numerous command-line options to customize its behavior. Here's a comprehensive guide to all available options.\n\n## Basic Usage\n\n```bash\nes-check \u003CecmaVersion> [files...] [options]\n```\n\n## Options Reference\n\n### `--module`\nUse ES modules parsing mode (default: false)\n\n```bash\nes-check es6 './dist/**/*.js' --module\n```\n\n### `--allowHashBang`\nAllow files starting with `#!` (shebang) (default: false)\n\n```bash\nes-check es6 './bin/*.js' --allowHashBang\n```\n\n### `--files \u003Cfiles>`\nSpecify files to check (alternative to positional arguments)\n\n```bash\nes-check es6 --files='./dist/**/*.js'\n```\n\n### `--not \u003Cfiles>`\nExclude specific files or patterns\n\n```bash\nes-check es5 './dist/**/*.js' --not='./dist/vendor/**/*.js'\n```\n\n### `--checkFeatures`\nCheck for ES version specific features (default: false)\n\n```bash\nes-check es6 './dist/**/*.js' --checkFeatures\n```\n\n### `--checkForPolyfills`\nConsider polyfills when checking features (requires --checkFeatures)\n\n```bash\nes-check es2022 './dist/**/*.js' --checkFeatures --checkForPolyfills\n```\n\n### `--ignore \u003Cfeatures>`\nComma-separated list of features to ignore\n\n```bash\nes-check es6 './dist/**/*.js' --checkFeatures --ignore=\"ErrorCause,TopLevelAwait\"\n```\n\n### `--allowList \u003Cfeatures>`\nAllow specific features even in lower ES versions\n\n```bash\nes-check es5 './dist/**/*.js' --checkFeatures --allowList=\"const,let\"\n```\n\n### `--checkBrowser`\nUse browserslist configuration to determine ES version\n\n```bash\nes-check --checkBrowser --browserslistQuery=\"last 2 versions\" ./dist/**/*.js\n```\n\n### `--browserslistQuery \u003Cquery>`\nCustom browserslist query\n\n```bash\nes-check checkBrowser ./dist/**/*.js --browserslistQuery=\">0.5%, not dead\"\n```\n\n### `--config \u003Cpath>`\nPath to custom .escheckrc config file\n\n```bash\nes-check --config=./configs/production.escheckrc.json\n```\n\n### Display Options\n\n- `--noColor` - Disable colored output\n- `--verbose` or `-v` - Show debug messages\n- `--quiet` - Only show warnings and errors\n- `--silent` - No output except exit code\n\n### Other Options\n\n- `--looseGlobMatching` - Don't fail if some globs match no files\n- `--version` or `-V` - Show version number\n- `--help` or `-h` - Show help message","src/content/docs/options.mdx","f48dc6dd5c1f9ebf","options.mdx","quickstart",{"id":93,"data":95,"body":98,"filePath":99,"digest":100,"legacyId":101,"deferredRender":20},{"title":96,"description":97},"Quick Start","Get up and running with ES Check in minutes","# Quick Start\n\nThis guide will help you get started with ES Check in just a few minutes.\n\n## Installation\n\nFirst, install ES Check in your project:\n\n```bash\nnpm install es-check --save-dev\n```\n\n## Basic Usage\n\n### Example 1: Check ES5 Compatibility\n\nCheck if your bundled JavaScript is ES5 compatible:\n\n```bash\nnpx es-check es5 './dist/**/*.js'\n```\n\n### Example 2: Check Multiple Directories\n\nCheck both vendor and distribution files:\n\n```bash\nnpx es-check es5 './vendor/**/*.js' './dist/**/*.js'\n```\n\n### Example 3: Check ES6 Modules\n\nFor ES6 modules, use the `--module` flag:\n\n```bash\nnpx es-check es6 './src/**/*.mjs' --module\n```\n\n## Common Scenarios\n\n### Production Build Check\n\nAdd to your build pipeline:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"webpack && npm run check:es\",\n    \"check:es\": \"es-check es5 './dist/**/*.js'\"\n  }\n}\n```\n\n### CI/CD Integration\n\n```yaml\n# Example GitHub Actions\n- name: Check ES Version\n  run: npx es-check es5 './dist/**/*.js'\n```\n\n### With Configuration File\n\nCreate `.escheckrc`:\n\n```json\n{\n  \"ecmaVersion\": \"es5\",\n  \"files\": [\"./dist/**/*.js\"],\n  \"not\": [\"./dist/modern/**/*.js\"]\n}\n```\n\nRun with:\n\n```bash\nnpx es-check\n```\n\n## Understanding Output\n\n### Success\n\n```bash\n✓ ES Check passed! All files are ES5 compatible.\n```\n\n### Failure\n\n```bash\n✗ ES Check failed!\n./dist/app.js - Uses ES6 feature: arrow function (line 10)\n./dist/utils.js - Uses ES6 feature: const declaration (line 5)\n```\n\n## What's Next?\n\n- [Explore all command options](/documentation/options)\n- [Configure ES Check for your project](/documentation/configuration)\n- [Debug ES version issues](/documentation/debugging)","src/content/docs/quickstart.mdx","469428e3e6c49348","quickstart.mdx","polyfills",{"id":102,"data":104,"body":107,"filePath":108,"digest":109,"legacyId":110,"deferredRender":20},{"title":105,"description":106},"Polyfill Detection","How to detect and handle polyfills with ES Check","# Polyfill Detection\n\nES Check can help identify when polyfills are needed and detect if they're already present in your code.\n\n## Using checkForPolyfills Option\n\nThe `--checkForPolyfills` flag helps identify polyfilled features that might mask ES version incompatibilities:\n\n```bash\nes-check es5 './dist/**/*.js' --checkForPolyfills\n```\n\n## How It Works\n\nWhen enabled, ES Check will:\n1. Detect common polyfill patterns\n2. Warn about polyfilled features that exceed your target ES version\n3. Help ensure your code works without polyfills in target environments\n\n## Example\n\n```bash\n# Without polyfill detection\nes-check es5 './dist/app.js'\n# ✓ Passed (but might include polyfills)\n\n# With polyfill detection\nes-check es5 './dist/app.js' --checkForPolyfills\n# ⚠ Warning: Array.prototype.includes polyfilled (ES7 feature)\n```\n\n## Common Polyfills Detected\n\n- Array methods (includes, find, findIndex)\n- Object methods (assign, entries, values)\n- String methods (startsWith, endsWith, includes)\n- Promise\n- Symbol\n- Map/Set\n\n## Configuration\n\nIn `.escheckrc`:\n\n```json\n{\n  \"ecmaVersion\": \"es5\",\n  \"files\": \"./dist/**/*.js\",\n  \"checkForPolyfills\": true\n}\n```\n\n## Best Practices\n\n1. **Test without polyfills**: Ensure your code works in target environments\n2. **Document polyfill requirements**: List required polyfills in your README\n3. **Use targeted polyfills**: Only include polyfills for features you actually use\n4. **Consider polyfill services**: Use services like polyfill.io for dynamic polyfilling","src/content/docs/polyfills.mdx","80bf4e0e549600a0","polyfills.mdx","ci-integration",{"id":111,"data":113,"body":116,"filePath":117,"digest":118,"legacyId":119,"deferredRender":20},{"title":114,"description":115},"CI/CD Integration","Integrate ES Check with your CI/CD pipeline for automated ES version checking","# CI/CD Integration\n\nIntegrate ES Check into your continuous integration and deployment pipelines to catch ES version issues before they reach production.\n\n## GitHub Actions\n\n```yaml\nname: ES Version Check\non: [push, pull_request]\n\njobs:\n  es-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          \n      - name: Install dependencies\n        run: npm ci\n        \n      - name: Build project\n        run: npm run build\n        \n      - name: Check ES5 compatibility\n        run: npx es-check es5 './dist/**/*.js'\n```\n\n## GitLab CI\n\n```yaml\nes-check:\n  stage: test\n  script:\n    - npm ci\n    - npm run build\n    - npx es-check es5 './dist/**/*.js'\n  only:\n    - merge_requests\n    - main\n```\n\n## Jenkins\n\n```groovy\npipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                sh 'npm ci'\n                sh 'npm run build'\n            }\n        }\n        stage('ES Check') {\n            steps {\n                sh 'npx es-check es5 \"./dist/**/*.js\"'\n            }\n        }\n    }\n}\n```\n\n## CircleCI\n\n```yaml\nversion: 2.1\njobs:\n  es-check:\n    docker:\n      - image: cimg/node:20.0\n    steps:\n      - checkout\n      - run: npm ci\n      - run: npm run build\n      - run:\n          name: Check ES Version\n          command: npx es-check es5 './dist/**/*.js'\n```\n\n## Travis CI\n\n```yaml\nlanguage: node_js\nnode_js:\n  - \"20\"\nscript:\n  - npm run build\n  - npx es-check es5 './dist/**/*.js'\n```\n\n## Error Handling in CI\n\n### Fail on ES Version Mismatch\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"webpack\",\n    \"test\": \"jest\",\n    \"check:es\": \"es-check es5 './dist/**/*.js'\",\n    \"ci\": \"npm run build && npm run test && npm run check:es\"\n  }\n}\n```\n\n### Generate Reports\n\n```bash\n# Output to file for artifacts\nes-check es5 './dist/**/*.js' > es-check-report.txt 2>&1 || true\n\n# Check exit code\nif [ $? -ne 0 ]; then\n  echo \"ES Check failed! See es-check-report.txt\"\n  exit 1\nfi\n```\n\n## Best Practices\n\n1. **Run after build**: Always run ES Check after your build process\n2. **Check all bundles**: Include vendor bundles and code splits\n3. **Set appropriate ES version**: Match your browser support requirements\n4. **Cache dependencies**: Speed up CI runs by caching node_modules\n5. **Fail fast**: Make ES Check errors fail the build\n\n## Parallel Checks\n\nFor large projects, run multiple ES checks in parallel:\n\n```yaml\n# GitHub Actions example\nstrategy:\n  matrix:\n    bundle: [main, vendor, polyfills]\nsteps:\n  - name: Check ${{ matrix.bundle }}\n    run: npx es-check es5 './dist/${{ matrix.bundle }}.*.js'\n```","src/content/docs/ci-integration.mdx","bc0fb7dd5827d883","ci-integration.mdx","debugging",{"id":120,"data":122,"body":125,"filePath":126,"digest":127,"legacyId":128,"deferredRender":20},{"title":123,"description":124},"Debugging","Debug ES version issues and understand error messages from ES Check","# Debugging ES Check Errors\n\nWhen ES Check finds incompatible JavaScript features, it provides detailed error messages to help you debug and fix the issues.\n\n## Understanding Error Messages\n\n### Basic Error Format\n\n```bash\n✗ ES Check failed!\n./dist/app.js\n  - error: Arrow function is not supported in ES5\n  - line: 42:15\n  - code: const sum = (a, b) => a + b;\n```\n\n### Multiple Errors\n\n```bash\n✗ ES Check failed!\n./dist/bundle.js\n  - error: let declaration is not supported in ES5\n  - line: 10:2\n  - code: let userName = 'John';\n  \n  - error: Template literal is not supported in ES5\n  - line: 15:18\n  - code: console.log(`Hello ${userName}`);\n```\n\n## Common ES Version Issues\n\n### ES5 Incompatibilities\n\n| Feature | Error | Solution |\n|---------|-------|----------|\n| Arrow functions | `Arrow function is not supported` | Use regular `function` |\n| `let`/`const` | `let/const declaration is not supported` | Use `var` |\n| Template literals | `Template literal is not supported` | Use string concatenation |\n| Destructuring | `Destructuring is not supported` | Use explicit property access |\n| Classes | `Class declaration is not supported` | Use function constructors |\n\n### ES6 Incompatibilities\n\n| Feature | Error | Solution |\n|---------|-------|----------|\n| Async/await | `Async function is not supported` | Use Promises |\n| Object spread | `Object spread is not supported` | Use Object.assign |\n| Optional chaining | `Optional chaining is not supported` | Use explicit checks |\n\n## Debugging Strategies\n\n### 1. Use Verbose Mode\n\nGet more detailed output:\n\n```bash\nes-check es5 './dist/**/*.js' --verbose\n```\n\n### 2. Check Specific Files\n\nNarrow down the issue:\n\n```bash\n# Check individual file\nes-check es5 './dist/problematic-file.js'\n\n# Check specific module\nes-check es5 './dist/vendor/*.js'\n```\n\n### 3. Ignore Specific Files\n\nExclude known incompatible files:\n\n```bash\nes-check es5 './dist/**/*.js' --not './dist/modern/**/*.js'\n```\n\n### 4. Check Source Maps\n\nIf available, ES Check can point to original source:\n\n```bash\nes-check es5 './dist/**/*.js' --verbose\n# Shows: Original source: src/components/Button.js:10\n```\n\n## Build Tool Configuration\n\n### Webpack\n\nEnsure proper transpilation:\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [{\n      test: /\\.js$/,\n      exclude: /node_modules/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: [['@babel/preset-env', {\n            targets: { ie: 11 }\n          }]]\n        }\n      }\n    }]\n  }\n};\n```\n\n### Babel\n\nCheck your `.babelrc`:\n\n```json\n{\n  \"presets\": [\n    [\"@babel/preset-env\", {\n      \"targets\": {\n        \"browsers\": [\"last 2 versions\", \"ie >= 11\"]\n      }\n    }]\n  ]\n}\n```\n\n### TypeScript\n\nEnsure correct target in `tsconfig.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES5\",\n    \"lib\": [\"ES5\", \"DOM\"]\n  }\n}\n```\n\n## Troubleshooting Tips\n\n### 1. Check Dependencies\n\nSome npm packages may not be transpiled:\n\n```bash\n# Check node_modules\nes-check es5 './node_modules/problematic-package/dist/*.js'\n```\n\n### 2. Verify Build Output\n\n```bash\n# Look at the actual generated code\ncat ./dist/app.js | grep \"=>\"  # Find arrow functions\ncat ./dist/app.js | grep \"const\\|let\"  # Find ES6 declarations\n```\n\n### 3. Use AST Explorer\n\nPaste problematic code into [astexplorer.net](https://astexplorer.net) to understand the syntax tree.\n\n### 4. Progressive Enhancement\n\n```javascript\n// Instead of failing, provide fallbacks\nif (typeof Promise !== 'undefined') {\n  // Use Promise-based code\n} else {\n  // Use callback-based code\n}\n```\n\n## Getting Help\n\nIf you're still stuck:\n\n1. Run with `--verbose` flag\n2. Check the [GitHub issues](https://github.com/yowainwright/es-check/issues)\n3. Include in your issue:\n   - ES Check version\n   - Node.js version\n   - Build tool configuration\n   - Error output\n   - Sample code causing the issue","src/content/docs/debugging.mdx","f6f855f7e8dfc7ff","debugging.mdx"]